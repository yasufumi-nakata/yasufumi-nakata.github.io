<div class="box"><%= _('Here you can set security options to make using SKIP safer.<br />They are set to recommended settings by default.<br />It may compromise the security level of SKIP if you moderate from default settings.') %></div>
<% @revert_columns = %w(enable_user_lock user_lock_trial_limit enable_password_periodic_change password_change_interval password_strength custom_password_strength_regex custom_password_strength_validation_message enable_login_keyphrase login_keyphrase enable_user_cleaning_notification user_cleaning_notification_interval enable_single_session) -%>
<h3><%= _('Lock accounts by unsuccessful log in attempts') %></h3>
<div class="box tabular">
  <p><%= settings_label_with_check_box_tag :enable_user_lock %></p>
  <p><%= settings_label_with_select_tag :user_lock_trial_limit, (3..10).to_a.map{ |i| i.to_s } %></p>
</div>
<h3><%= _('Periodic password change') %></h3>
<div class="box tabular">
  <p>
    <%= settings_label_with_check_box_tag :enable_password_periodic_change %>
    <%= link_to(_('[Reset the password expiration period for all users]'), reset_all_password_expiration_periods_admin_users_path, :id => 'reset_passwords', :confirm => _('Are you sure?'), :method => :post) %>
  </p>
  <p><%= settings_label_with_text_field_tag :password_change_interval %></p>
</div>
<h3><%= _('Password strength') %></h3>
<div class="box tabular">
  <p>
    <%= settings_label_with_select_tag :password_strength, password_strength_container %>
    <% if enable_forgot_password? -%>
      <%= link_to(_('[Request all users to reset their passwords]'), lock_actives_admin_users_path, :id => 'lock_actives', :confirm => _('This will lock all user accounts including yourself. All logged in users will be forced to log out and passwords need to be reset to log in again. Are you sure to proceed?'), :method => :post) %>
      <%= help_icon_tag :content => _('Lock all current user accounts. Users will be asked to reset their passwords next time they log in. Use this when you want all users to reset their passwords in cases such as password strength has been strengthen.') %>
    <% end -%>
  </p>
  <span id="custom_password_strength">
    <p><%= settings_label_with_text_field_tag :custom_password_strength_regex, :size => 40, :disabled => 'disabled' %></p>
    <p><%= settings_label_with_text_field_tag :custom_password_strength_validation_message, :size => 40, :disabled => 'disabled' %></p>
  </span>
</div>
<h3><%= _('Login keyphrase') %></h3>
<div class="box tabular">
  <p><%= settings_label_with_check_box_tag :enable_login_keyphrase %></p>
  <p><%= settings_label_with_text_field_tag :login_keyphrase %></p>
</div>
<h3><%= _('Prompt for user data cleaning by email') %></h3>
<div class="box tabular">
  <p><%= settings_label_with_check_box_tag :enable_user_cleaning_notification %></p>
  <p><%= settings_label_with_select_tag :user_cleaning_notification_interval, ['1', '3', '6', '12'] %></p>
</div>
<h3><%= _('Limit to single session') %></h3>
<div class="box tabular">
  <p><%= settings_label_with_check_box_tag :enable_single_session %></p>
  <p><%= settings_label_with_check_box_tag :enable_login_save %></p>
</div>

<% content_for :javascript_initializers do -%>
    var toggleByCheckbox = function(checkboxId){
      var jcheckbox = $j('#' + checkboxId);
      if(jcheckbox.is(':checked')){
        jcheckbox.parent().nextAll().find(':input').removeAttr('disabled');
        jcheckbox.parent().nextAll().find('label').css('color', '#505050');
      }else{
        jcheckbox.parent().nextAll().find(':input').attr('disabled', 'disabled');
        jcheckbox.parent().nextAll().find('label').css('color', '#999');
      }
    };
    var toggleLoginTrialLimit = function() {
        toggleByCheckbox('setting_enable_user_lock');
    };
    var togglePasswordChangeInterval = function() {
        toggleByCheckbox('setting_enable_password_periodic_change');
        if ( $j('#setting_enable_password_periodic_change').is(':checked') ) {
            $j('#reset_passwords').show();
        } else {
            $j('#reset_passwords').hide();
        }
    };
    var toggleCustomPasswordStrength = function() {
        if($j('#setting_password_strength').val() == 'custom') {
            $j('#custom_password_strength input').removeAttr('disabled');
            $j('#custom_password_strength label').css('color',  '#505050');
        } else {
            $j('#custom_password_strength input').attr('disabled', 'disabled');
            $j('#custom_password_strength label').css('color',  '#999');
        }
    };
    var toggleLoginKeyPhrase = function() {
        toggleByCheckbox('setting_enable_login_keyphrase');
    };
    var toggleCleaningNotificationInterval = function() {
        toggleByCheckbox('setting_enable_user_cleaning_notification');
    };
    var setupSecurityForm = function() {
        toggleLoginTrialLimit();
        togglePasswordChangeInterval();
        toggleCustomPasswordStrength();
        toggleLoginKeyPhrase();
        toggleCleaningNotificationInterval();
    };
    $j('#setting_enable_user_lock')
    .click(function() {
        toggleLoginTrialLimit();
    });
    $j('#setting_enable_password_periodic_change')
    .click(function() {
        togglePasswordChangeInterval();
    });
    $j('#setting_password_strength')
    .keyup(function(event){
        if(event.keyCode == 38 || event.keyCode == 40)
            toggleCustomPasswordStrength();
    })
    .change(function(){
        toggleCustomPasswordStrength();
    });
    $j('#setting_enable_login_keyphrase')
    .click(function() {
        toggleLoginKeyPhrase();
    });
    $j('#setting_enable_user_cleaning_notification')
    .click(function() {
        toggleCleaningNotificationInterval();
    });
    setupSecurityForm();
<% end -%>
